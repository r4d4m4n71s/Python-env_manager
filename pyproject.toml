[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Development Tools:
# For Windows users: Use dev_tools.bat
# For Linux/Mac users: Use dev_tools.sh
# Available commands:
#   build      - Build the application in dev mode
#   prehook-on  - Enable pre-commit hooks
#   prehook-off - Disable pre-commit hooks
#   test       - Run tests

[project]
name = "env_manager"
version = "0.1.0"
description = "virtual environment lifecycle manager"
readme = "README.md"
requires-python = ">=3.8"
authors = [
    { name = "r4d4m4n71s"}
]
dependencies = [
    "questionary>=2.1.0"
    # Core Python standard library dependencies (already available)
    # No external package dependencies required for core functionality
]

# In developer mode these libraries only will be installed in the defined environment
[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",           # Linting
    "pytest",                # Testing
    "black>=23.0",           # Code formatting
    "mypy>=1.0",             # Static type checking
    "pre-commit>=3.5.0",     # Pre-commit hooks management
    "appdirs>=1.4.4",        # To store app state
    "pytest-progress>=1.3.0",# Show test exec progress
    "questionary>=2.1.0"     # Menu handler
]

[tool.hatch.build.targets.wheel]
packages = ["venv_py"]

[tool.hatch.envs.dev]
features = ["dev"]
scripts = { setup = "pre-commit install" }

# Ruff is an extremely fast Python linter that checks code for errors, style violations,
# and potential bugs. It combines multiple Python linters into a single tool.
[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    #"E",    # pycodestyle errors - Style errors according to PEP 8
    #"W",    # pycodestyle warnings - Style warnings according to PEP 8
    "F",    # pyflakes - Detects logical errors like unused imports, undefined names, etc.
    #"I",    # isort - Import sorting and organization
    "C",    # flake8-comprehensions - Suggests improvements for list/dict/set comprehensions
    "B",    # flake8-bugbear - Catches common bugs and design problems in code
]

# Black is an uncompromising code formatter that automatically formats Python code
# to be consistent across the entire project, eliminating style discussions.
[tool.black]
line-length = 88            # Maximum line length, matching ruff's setting
target-version = ["py311"]  # Format code targeting Python 3.11 features

# MyPy is a static type checker that helps catch type-related bugs before runtime
# by analyzing type hints in the code.
[tool.mypy]
python_version = "3.11"        # Check types against Python 3.11's type system
warn_return_any = true         # Flag functions that return Any type
warn_unused_configs = true     # Alert on unused mypy configurations
disallow_untyped_defs = false  # Allow functions without type annotations

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-v"  # Verbose test output
